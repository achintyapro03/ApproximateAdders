$date
	Thu Apr 18 16:30:43 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbenchhybridfa $end
$var wire 32 ! sum2 [31:0] $end
$var wire 32 " sum1 [31:0] $end
$var wire 1 # cout1 $end
$var reg 32 $ A1 [31:0] $end
$var reg 32 % A2 [31:0] $end
$var reg 32 & B1 [31:0] $end
$var reg 32 ' B2 [31:0] $end
$scope module HybridAdderInst1 $end
$var wire 32 ( A [31:0] $end
$var wire 32 ) B [31:0] $end
$var wire 32 * sum [31:0] $end
$var wire 32 + selectedB [31:0] $end
$var wire 1 , fn $end
$var wire 1 # cout $end
$scope begin genblk1 $end
$upscope $end
$scope module nBitRcpa2Inst $end
$var wire 16 - A [15:0] $end
$var wire 16 . B [15:0] $end
$var wire 16 / sum [15:0] $end
$var wire 1 , fn $end
$var wire 17 0 carry [16:0] $end
$var wire 17 1 F [16:0] $end
$scope begin rcpa2Loop[0] $end
$scope module rcpfa2_inst $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 4 cIn $end
$var wire 1 5 fIn $end
$var wire 1 6 s $end
$var wire 1 7 notFOut $end
$var wire 1 8 notFIn $end
$var wire 1 9 notCOut $end
$var wire 1 : notCIn $end
$var wire 1 ; fOut $end
$var wire 1 < cOut $end
$var wire 1 = Y $end
$scope module OA1 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 = out $end
$var wire 1 > node2 $end
$var wire 1 ? node1 $end
$var wire 1 : c $end
$scope module nand1 $end
$var wire 1 = out $end
$var wire 1 : b $end
$var wire 1 > a $end
$upscope $end
$scope module nor1 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 ? out $end
$upscope $end
$scope module not1 $end
$var wire 1 ? a $end
$var wire 1 > out $end
$upscope $end
$upscope $end
$scope module nand1 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 7 out $end
$upscope $end
$scope module nand2 $end
$var wire 1 = b $end
$var wire 1 6 out $end
$var wire 1 8 a $end
$upscope $end
$scope module nand3 $end
$var wire 1 5 a $end
$var wire 1 = b $end
$var wire 1 9 out $end
$upscope $end
$scope module not1 $end
$var wire 1 7 a $end
$var wire 1 ; out $end
$upscope $end
$scope module not2 $end
$var wire 1 4 a $end
$var wire 1 : out $end
$upscope $end
$scope module not3 $end
$var wire 1 5 a $end
$var wire 1 8 out $end
$upscope $end
$scope module not4 $end
$var wire 1 9 a $end
$var wire 1 < out $end
$upscope $end
$upscope $end
$upscope $end
$scope begin rcpa2Loop[1] $end
$scope module rcpfa2_inst $end
$var wire 1 @ a $end
$var wire 1 A b $end
$var wire 1 B cIn $end
$var wire 1 C fIn $end
$var wire 1 D s $end
$var wire 1 E notFOut $end
$var wire 1 F notFIn $end
$var wire 1 G notCOut $end
$var wire 1 H notCIn $end
$var wire 1 I fOut $end
$var wire 1 J cOut $end
$var wire 1 K Y $end
$scope module OA1 $end
$var wire 1 @ a $end
$var wire 1 A b $end
$var wire 1 K out $end
$var wire 1 L node2 $end
$var wire 1 M node1 $end
$var wire 1 H c $end
$scope module nand1 $end
$var wire 1 K out $end
$var wire 1 H b $end
$var wire 1 L a $end
$upscope $end
$scope module nor1 $end
$var wire 1 @ a $end
$var wire 1 A b $end
$var wire 1 M out $end
$upscope $end
$scope module not1 $end
$var wire 1 M a $end
$var wire 1 L out $end
$upscope $end
$upscope $end
$scope module nand1 $end
$var wire 1 @ a $end
$var wire 1 A b $end
$var wire 1 E out $end
$upscope $end
$scope module nand2 $end
$var wire 1 K b $end
$var wire 1 D out $end
$var wire 1 F a $end
$upscope $end
$scope module nand3 $end
$var wire 1 C a $end
$var wire 1 K b $end
$var wire 1 G out $end
$upscope $end
$scope module not1 $end
$var wire 1 E a $end
$var wire 1 I out $end
$upscope $end
$scope module not2 $end
$var wire 1 B a $end
$var wire 1 H out $end
$upscope $end
$scope module not3 $end
$var wire 1 C a $end
$var wire 1 F out $end
$upscope $end
$scope module not4 $end
$var wire 1 G a $end
$var wire 1 J out $end
$upscope $end
$upscope $end
$upscope $end
$scope begin rcpa2Loop[2] $end
$scope module rcpfa2_inst $end
$var wire 1 N a $end
$var wire 1 O b $end
$var wire 1 P cIn $end
$var wire 1 Q fIn $end
$var wire 1 R s $end
$var wire 1 S notFOut $end
$var wire 1 T notFIn $end
$var wire 1 U notCOut $end
$var wire 1 V notCIn $end
$var wire 1 W fOut $end
$var wire 1 X cOut $end
$var wire 1 Y Y $end
$scope module OA1 $end
$var wire 1 N a $end
$var wire 1 O b $end
$var wire 1 Y out $end
$var wire 1 Z node2 $end
$var wire 1 [ node1 $end
$var wire 1 V c $end
$scope module nand1 $end
$var wire 1 Y out $end
$var wire 1 V b $end
$var wire 1 Z a $end
$upscope $end
$scope module nor1 $end
$var wire 1 N a $end
$var wire 1 O b $end
$var wire 1 [ out $end
$upscope $end
$scope module not1 $end
$var wire 1 [ a $end
$var wire 1 Z out $end
$upscope $end
$upscope $end
$scope module nand1 $end
$var wire 1 N a $end
$var wire 1 O b $end
$var wire 1 S out $end
$upscope $end
$scope module nand2 $end
$var wire 1 Y b $end
$var wire 1 R out $end
$var wire 1 T a $end
$upscope $end
$scope module nand3 $end
$var wire 1 Q a $end
$var wire 1 Y b $end
$var wire 1 U out $end
$upscope $end
$scope module not1 $end
$var wire 1 S a $end
$var wire 1 W out $end
$upscope $end
$scope module not2 $end
$var wire 1 P a $end
$var wire 1 V out $end
$upscope $end
$scope module not3 $end
$var wire 1 Q a $end
$var wire 1 T out $end
$upscope $end
$scope module not4 $end
$var wire 1 U a $end
$var wire 1 X out $end
$upscope $end
$upscope $end
$upscope $end
$scope begin rcpa2Loop[3] $end
$scope module rcpfa2_inst $end
$var wire 1 \ a $end
$var wire 1 ] b $end
$var wire 1 ^ cIn $end
$var wire 1 _ fIn $end
$var wire 1 ` s $end
$var wire 1 a notFOut $end
$var wire 1 b notFIn $end
$var wire 1 c notCOut $end
$var wire 1 d notCIn $end
$var wire 1 e fOut $end
$var wire 1 f cOut $end
$var wire 1 g Y $end
$scope module OA1 $end
$var wire 1 \ a $end
$var wire 1 ] b $end
$var wire 1 g out $end
$var wire 1 h node2 $end
$var wire 1 i node1 $end
$var wire 1 d c $end
$scope module nand1 $end
$var wire 1 g out $end
$var wire 1 d b $end
$var wire 1 h a $end
$upscope $end
$scope module nor1 $end
$var wire 1 \ a $end
$var wire 1 ] b $end
$var wire 1 i out $end
$upscope $end
$scope module not1 $end
$var wire 1 i a $end
$var wire 1 h out $end
$upscope $end
$upscope $end
$scope module nand1 $end
$var wire 1 \ a $end
$var wire 1 ] b $end
$var wire 1 a out $end
$upscope $end
$scope module nand2 $end
$var wire 1 g b $end
$var wire 1 ` out $end
$var wire 1 b a $end
$upscope $end
$scope module nand3 $end
$var wire 1 _ a $end
$var wire 1 g b $end
$var wire 1 c out $end
$upscope $end
$scope module not1 $end
$var wire 1 a a $end
$var wire 1 e out $end
$upscope $end
$scope module not2 $end
$var wire 1 ^ a $end
$var wire 1 d out $end
$upscope $end
$scope module not3 $end
$var wire 1 _ a $end
$var wire 1 b out $end
$upscope $end
$scope module not4 $end
$var wire 1 c a $end
$var wire 1 f out $end
$upscope $end
$upscope $end
$upscope $end
$scope begin rcpa2Loop[4] $end
$scope module rcpfa2_inst $end
$var wire 1 j a $end
$var wire 1 k b $end
$var wire 1 l cIn $end
$var wire 1 m fIn $end
$var wire 1 n s $end
$var wire 1 o notFOut $end
$var wire 1 p notFIn $end
$var wire 1 q notCOut $end
$var wire 1 r notCIn $end
$var wire 1 s fOut $end
$var wire 1 t cOut $end
$var wire 1 u Y $end
$scope module OA1 $end
$var wire 1 j a $end
$var wire 1 k b $end
$var wire 1 u out $end
$var wire 1 v node2 $end
$var wire 1 w node1 $end
$var wire 1 r c $end
$scope module nand1 $end
$var wire 1 u out $end
$var wire 1 r b $end
$var wire 1 v a $end
$upscope $end
$scope module nor1 $end
$var wire 1 j a $end
$var wire 1 k b $end
$var wire 1 w out $end
$upscope $end
$scope module not1 $end
$var wire 1 w a $end
$var wire 1 v out $end
$upscope $end
$upscope $end
$scope module nand1 $end
$var wire 1 j a $end
$var wire 1 k b $end
$var wire 1 o out $end
$upscope $end
$scope module nand2 $end
$var wire 1 u b $end
$var wire 1 n out $end
$var wire 1 p a $end
$upscope $end
$scope module nand3 $end
$var wire 1 m a $end
$var wire 1 u b $end
$var wire 1 q out $end
$upscope $end
$scope module not1 $end
$var wire 1 o a $end
$var wire 1 s out $end
$upscope $end
$scope module not2 $end
$var wire 1 l a $end
$var wire 1 r out $end
$upscope $end
$scope module not3 $end
$var wire 1 m a $end
$var wire 1 p out $end
$upscope $end
$scope module not4 $end
$var wire 1 q a $end
$var wire 1 t out $end
$upscope $end
$upscope $end
$upscope $end
$scope begin rcpa2Loop[5] $end
$scope module rcpfa2_inst $end
$var wire 1 x a $end
$var wire 1 y b $end
$var wire 1 z cIn $end
$var wire 1 { fIn $end
$var wire 1 | s $end
$var wire 1 } notFOut $end
$var wire 1 ~ notFIn $end
$var wire 1 !" notCOut $end
$var wire 1 "" notCIn $end
$var wire 1 #" fOut $end
$var wire 1 $" cOut $end
$var wire 1 %" Y $end
$scope module OA1 $end
$var wire 1 x a $end
$var wire 1 y b $end
$var wire 1 %" out $end
$var wire 1 &" node2 $end
$var wire 1 '" node1 $end
$var wire 1 "" c $end
$scope module nand1 $end
$var wire 1 %" out $end
$var wire 1 "" b $end
$var wire 1 &" a $end
$upscope $end
$scope module nor1 $end
$var wire 1 x a $end
$var wire 1 y b $end
$var wire 1 '" out $end
$upscope $end
$scope module not1 $end
$var wire 1 '" a $end
$var wire 1 &" out $end
$upscope $end
$upscope $end
$scope module nand1 $end
$var wire 1 x a $end
$var wire 1 y b $end
$var wire 1 } out $end
$upscope $end
$scope module nand2 $end
$var wire 1 %" b $end
$var wire 1 | out $end
$var wire 1 ~ a $end
$upscope $end
$scope module nand3 $end
$var wire 1 { a $end
$var wire 1 %" b $end
$var wire 1 !" out $end
$upscope $end
$scope module not1 $end
$var wire 1 } a $end
$var wire 1 #" out $end
$upscope $end
$scope module not2 $end
$var wire 1 z a $end
$var wire 1 "" out $end
$upscope $end
$scope module not3 $end
$var wire 1 { a $end
$var wire 1 ~ out $end
$upscope $end
$scope module not4 $end
$var wire 1 !" a $end
$var wire 1 $" out $end
$upscope $end
$upscope $end
$upscope $end
$scope begin rcpa2Loop[6] $end
$scope module rcpfa2_inst $end
$var wire 1 (" a $end
$var wire 1 )" b $end
$var wire 1 *" cIn $end
$var wire 1 +" fIn $end
$var wire 1 ," s $end
$var wire 1 -" notFOut $end
$var wire 1 ." notFIn $end
$var wire 1 /" notCOut $end
$var wire 1 0" notCIn $end
$var wire 1 1" fOut $end
$var wire 1 2" cOut $end
$var wire 1 3" Y $end
$scope module OA1 $end
$var wire 1 (" a $end
$var wire 1 )" b $end
$var wire 1 3" out $end
$var wire 1 4" node2 $end
$var wire 1 5" node1 $end
$var wire 1 0" c $end
$scope module nand1 $end
$var wire 1 3" out $end
$var wire 1 0" b $end
$var wire 1 4" a $end
$upscope $end
$scope module nor1 $end
$var wire 1 (" a $end
$var wire 1 )" b $end
$var wire 1 5" out $end
$upscope $end
$scope module not1 $end
$var wire 1 5" a $end
$var wire 1 4" out $end
$upscope $end
$upscope $end
$scope module nand1 $end
$var wire 1 (" a $end
$var wire 1 )" b $end
$var wire 1 -" out $end
$upscope $end
$scope module nand2 $end
$var wire 1 3" b $end
$var wire 1 ," out $end
$var wire 1 ." a $end
$upscope $end
$scope module nand3 $end
$var wire 1 +" a $end
$var wire 1 3" b $end
$var wire 1 /" out $end
$upscope $end
$scope module not1 $end
$var wire 1 -" a $end
$var wire 1 1" out $end
$upscope $end
$scope module not2 $end
$var wire 1 *" a $end
$var wire 1 0" out $end
$upscope $end
$scope module not3 $end
$var wire 1 +" a $end
$var wire 1 ." out $end
$upscope $end
$scope module not4 $end
$var wire 1 /" a $end
$var wire 1 2" out $end
$upscope $end
$upscope $end
$upscope $end
$scope begin rcpa2Loop[7] $end
$scope module rcpfa2_inst $end
$var wire 1 6" a $end
$var wire 1 7" b $end
$var wire 1 8" cIn $end
$var wire 1 9" fIn $end
$var wire 1 :" s $end
$var wire 1 ;" notFOut $end
$var wire 1 <" notFIn $end
$var wire 1 =" notCOut $end
$var wire 1 >" notCIn $end
$var wire 1 ?" fOut $end
$var wire 1 @" cOut $end
$var wire 1 A" Y $end
$scope module OA1 $end
$var wire 1 6" a $end
$var wire 1 7" b $end
$var wire 1 A" out $end
$var wire 1 B" node2 $end
$var wire 1 C" node1 $end
$var wire 1 >" c $end
$scope module nand1 $end
$var wire 1 A" out $end
$var wire 1 >" b $end
$var wire 1 B" a $end
$upscope $end
$scope module nor1 $end
$var wire 1 6" a $end
$var wire 1 7" b $end
$var wire 1 C" out $end
$upscope $end
$scope module not1 $end
$var wire 1 C" a $end
$var wire 1 B" out $end
$upscope $end
$upscope $end
$scope module nand1 $end
$var wire 1 6" a $end
$var wire 1 7" b $end
$var wire 1 ;" out $end
$upscope $end
$scope module nand2 $end
$var wire 1 A" b $end
$var wire 1 :" out $end
$var wire 1 <" a $end
$upscope $end
$scope module nand3 $end
$var wire 1 9" a $end
$var wire 1 A" b $end
$var wire 1 =" out $end
$upscope $end
$scope module not1 $end
$var wire 1 ;" a $end
$var wire 1 ?" out $end
$upscope $end
$scope module not2 $end
$var wire 1 8" a $end
$var wire 1 >" out $end
$upscope $end
$scope module not3 $end
$var wire 1 9" a $end
$var wire 1 <" out $end
$upscope $end
$scope module not4 $end
$var wire 1 =" a $end
$var wire 1 @" out $end
$upscope $end
$upscope $end
$upscope $end
$scope begin rcpa2Loop[8] $end
$scope module rcpfa2_inst $end
$var wire 1 D" a $end
$var wire 1 E" b $end
$var wire 1 F" cIn $end
$var wire 1 G" fIn $end
$var wire 1 H" s $end
$var wire 1 I" notFOut $end
$var wire 1 J" notFIn $end
$var wire 1 K" notCOut $end
$var wire 1 L" notCIn $end
$var wire 1 M" fOut $end
$var wire 1 N" cOut $end
$var wire 1 O" Y $end
$scope module OA1 $end
$var wire 1 D" a $end
$var wire 1 E" b $end
$var wire 1 O" out $end
$var wire 1 P" node2 $end
$var wire 1 Q" node1 $end
$var wire 1 L" c $end
$scope module nand1 $end
$var wire 1 O" out $end
$var wire 1 L" b $end
$var wire 1 P" a $end
$upscope $end
$scope module nor1 $end
$var wire 1 D" a $end
$var wire 1 E" b $end
$var wire 1 Q" out $end
$upscope $end
$scope module not1 $end
$var wire 1 Q" a $end
$var wire 1 P" out $end
$upscope $end
$upscope $end
$scope module nand1 $end
$var wire 1 D" a $end
$var wire 1 E" b $end
$var wire 1 I" out $end
$upscope $end
$scope module nand2 $end
$var wire 1 O" b $end
$var wire 1 H" out $end
$var wire 1 J" a $end
$upscope $end
$scope module nand3 $end
$var wire 1 G" a $end
$var wire 1 O" b $end
$var wire 1 K" out $end
$upscope $end
$scope module not1 $end
$var wire 1 I" a $end
$var wire 1 M" out $end
$upscope $end
$scope module not2 $end
$var wire 1 F" a $end
$var wire 1 L" out $end
$upscope $end
$scope module not3 $end
$var wire 1 G" a $end
$var wire 1 J" out $end
$upscope $end
$scope module not4 $end
$var wire 1 K" a $end
$var wire 1 N" out $end
$upscope $end
$upscope $end
$upscope $end
$scope begin rcpa2Loop[9] $end
$scope module rcpfa2_inst $end
$var wire 1 R" a $end
$var wire 1 S" b $end
$var wire 1 T" cIn $end
$var wire 1 U" fIn $end
$var wire 1 V" s $end
$var wire 1 W" notFOut $end
$var wire 1 X" notFIn $end
$var wire 1 Y" notCOut $end
$var wire 1 Z" notCIn $end
$var wire 1 [" fOut $end
$var wire 1 \" cOut $end
$var wire 1 ]" Y $end
$scope module OA1 $end
$var wire 1 R" a $end
$var wire 1 S" b $end
$var wire 1 ]" out $end
$var wire 1 ^" node2 $end
$var wire 1 _" node1 $end
$var wire 1 Z" c $end
$scope module nand1 $end
$var wire 1 ]" out $end
$var wire 1 Z" b $end
$var wire 1 ^" a $end
$upscope $end
$scope module nor1 $end
$var wire 1 R" a $end
$var wire 1 S" b $end
$var wire 1 _" out $end
$upscope $end
$scope module not1 $end
$var wire 1 _" a $end
$var wire 1 ^" out $end
$upscope $end
$upscope $end
$scope module nand1 $end
$var wire 1 R" a $end
$var wire 1 S" b $end
$var wire 1 W" out $end
$upscope $end
$scope module nand2 $end
$var wire 1 ]" b $end
$var wire 1 V" out $end
$var wire 1 X" a $end
$upscope $end
$scope module nand3 $end
$var wire 1 U" a $end
$var wire 1 ]" b $end
$var wire 1 Y" out $end
$upscope $end
$scope module not1 $end
$var wire 1 W" a $end
$var wire 1 [" out $end
$upscope $end
$scope module not2 $end
$var wire 1 T" a $end
$var wire 1 Z" out $end
$upscope $end
$scope module not3 $end
$var wire 1 U" a $end
$var wire 1 X" out $end
$upscope $end
$scope module not4 $end
$var wire 1 Y" a $end
$var wire 1 \" out $end
$upscope $end
$upscope $end
$upscope $end
$scope begin rcpa2Loop[10] $end
$scope module rcpfa2_inst $end
$var wire 1 `" a $end
$var wire 1 a" b $end
$var wire 1 b" cIn $end
$var wire 1 c" fIn $end
$var wire 1 d" s $end
$var wire 1 e" notFOut $end
$var wire 1 f" notFIn $end
$var wire 1 g" notCOut $end
$var wire 1 h" notCIn $end
$var wire 1 i" fOut $end
$var wire 1 j" cOut $end
$var wire 1 k" Y $end
$scope module OA1 $end
$var wire 1 `" a $end
$var wire 1 a" b $end
$var wire 1 k" out $end
$var wire 1 l" node2 $end
$var wire 1 m" node1 $end
$var wire 1 h" c $end
$scope module nand1 $end
$var wire 1 k" out $end
$var wire 1 h" b $end
$var wire 1 l" a $end
$upscope $end
$scope module nor1 $end
$var wire 1 `" a $end
$var wire 1 a" b $end
$var wire 1 m" out $end
$upscope $end
$scope module not1 $end
$var wire 1 m" a $end
$var wire 1 l" out $end
$upscope $end
$upscope $end
$scope module nand1 $end
$var wire 1 `" a $end
$var wire 1 a" b $end
$var wire 1 e" out $end
$upscope $end
$scope module nand2 $end
$var wire 1 k" b $end
$var wire 1 d" out $end
$var wire 1 f" a $end
$upscope $end
$scope module nand3 $end
$var wire 1 c" a $end
$var wire 1 k" b $end
$var wire 1 g" out $end
$upscope $end
$scope module not1 $end
$var wire 1 e" a $end
$var wire 1 i" out $end
$upscope $end
$scope module not2 $end
$var wire 1 b" a $end
$var wire 1 h" out $end
$upscope $end
$scope module not3 $end
$var wire 1 c" a $end
$var wire 1 f" out $end
$upscope $end
$scope module not4 $end
$var wire 1 g" a $end
$var wire 1 j" out $end
$upscope $end
$upscope $end
$upscope $end
$scope begin rcpa2Loop[11] $end
$scope module rcpfa2_inst $end
$var wire 1 n" a $end
$var wire 1 o" b $end
$var wire 1 p" cIn $end
$var wire 1 q" fIn $end
$var wire 1 r" s $end
$var wire 1 s" notFOut $end
$var wire 1 t" notFIn $end
$var wire 1 u" notCOut $end
$var wire 1 v" notCIn $end
$var wire 1 w" fOut $end
$var wire 1 x" cOut $end
$var wire 1 y" Y $end
$scope module OA1 $end
$var wire 1 n" a $end
$var wire 1 o" b $end
$var wire 1 y" out $end
$var wire 1 z" node2 $end
$var wire 1 {" node1 $end
$var wire 1 v" c $end
$scope module nand1 $end
$var wire 1 y" out $end
$var wire 1 v" b $end
$var wire 1 z" a $end
$upscope $end
$scope module nor1 $end
$var wire 1 n" a $end
$var wire 1 o" b $end
$var wire 1 {" out $end
$upscope $end
$scope module not1 $end
$var wire 1 {" a $end
$var wire 1 z" out $end
$upscope $end
$upscope $end
$scope module nand1 $end
$var wire 1 n" a $end
$var wire 1 o" b $end
$var wire 1 s" out $end
$upscope $end
$scope module nand2 $end
$var wire 1 y" b $end
$var wire 1 r" out $end
$var wire 1 t" a $end
$upscope $end
$scope module nand3 $end
$var wire 1 q" a $end
$var wire 1 y" b $end
$var wire 1 u" out $end
$upscope $end
$scope module not1 $end
$var wire 1 s" a $end
$var wire 1 w" out $end
$upscope $end
$scope module not2 $end
$var wire 1 p" a $end
$var wire 1 v" out $end
$upscope $end
$scope module not3 $end
$var wire 1 q" a $end
$var wire 1 t" out $end
$upscope $end
$scope module not4 $end
$var wire 1 u" a $end
$var wire 1 x" out $end
$upscope $end
$upscope $end
$upscope $end
$scope begin rcpa2Loop[12] $end
$scope module rcpfa2_inst $end
$var wire 1 |" a $end
$var wire 1 }" b $end
$var wire 1 ~" cIn $end
$var wire 1 !# fIn $end
$var wire 1 "# s $end
$var wire 1 ## notFOut $end
$var wire 1 $# notFIn $end
$var wire 1 %# notCOut $end
$var wire 1 &# notCIn $end
$var wire 1 '# fOut $end
$var wire 1 (# cOut $end
$var wire 1 )# Y $end
$scope module OA1 $end
$var wire 1 |" a $end
$var wire 1 }" b $end
$var wire 1 )# out $end
$var wire 1 *# node2 $end
$var wire 1 +# node1 $end
$var wire 1 &# c $end
$scope module nand1 $end
$var wire 1 )# out $end
$var wire 1 &# b $end
$var wire 1 *# a $end
$upscope $end
$scope module nor1 $end
$var wire 1 |" a $end
$var wire 1 }" b $end
$var wire 1 +# out $end
$upscope $end
$scope module not1 $end
$var wire 1 +# a $end
$var wire 1 *# out $end
$upscope $end
$upscope $end
$scope module nand1 $end
$var wire 1 |" a $end
$var wire 1 }" b $end
$var wire 1 ## out $end
$upscope $end
$scope module nand2 $end
$var wire 1 )# b $end
$var wire 1 "# out $end
$var wire 1 $# a $end
$upscope $end
$scope module nand3 $end
$var wire 1 !# a $end
$var wire 1 )# b $end
$var wire 1 %# out $end
$upscope $end
$scope module not1 $end
$var wire 1 ## a $end
$var wire 1 '# out $end
$upscope $end
$scope module not2 $end
$var wire 1 ~" a $end
$var wire 1 &# out $end
$upscope $end
$scope module not3 $end
$var wire 1 !# a $end
$var wire 1 $# out $end
$upscope $end
$scope module not4 $end
$var wire 1 %# a $end
$var wire 1 (# out $end
$upscope $end
$upscope $end
$upscope $end
$scope begin rcpa2Loop[13] $end
$scope module rcpfa2_inst $end
$var wire 1 ,# a $end
$var wire 1 -# b $end
$var wire 1 .# cIn $end
$var wire 1 /# fIn $end
$var wire 1 0# s $end
$var wire 1 1# notFOut $end
$var wire 1 2# notFIn $end
$var wire 1 3# notCOut $end
$var wire 1 4# notCIn $end
$var wire 1 5# fOut $end
$var wire 1 6# cOut $end
$var wire 1 7# Y $end
$scope module OA1 $end
$var wire 1 ,# a $end
$var wire 1 -# b $end
$var wire 1 7# out $end
$var wire 1 8# node2 $end
$var wire 1 9# node1 $end
$var wire 1 4# c $end
$scope module nand1 $end
$var wire 1 7# out $end
$var wire 1 4# b $end
$var wire 1 8# a $end
$upscope $end
$scope module nor1 $end
$var wire 1 ,# a $end
$var wire 1 -# b $end
$var wire 1 9# out $end
$upscope $end
$scope module not1 $end
$var wire 1 9# a $end
$var wire 1 8# out $end
$upscope $end
$upscope $end
$scope module nand1 $end
$var wire 1 ,# a $end
$var wire 1 -# b $end
$var wire 1 1# out $end
$upscope $end
$scope module nand2 $end
$var wire 1 7# b $end
$var wire 1 0# out $end
$var wire 1 2# a $end
$upscope $end
$scope module nand3 $end
$var wire 1 /# a $end
$var wire 1 7# b $end
$var wire 1 3# out $end
$upscope $end
$scope module not1 $end
$var wire 1 1# a $end
$var wire 1 5# out $end
$upscope $end
$scope module not2 $end
$var wire 1 .# a $end
$var wire 1 4# out $end
$upscope $end
$scope module not3 $end
$var wire 1 /# a $end
$var wire 1 2# out $end
$upscope $end
$scope module not4 $end
$var wire 1 3# a $end
$var wire 1 6# out $end
$upscope $end
$upscope $end
$upscope $end
$scope begin rcpa2Loop[14] $end
$scope module rcpfa2_inst $end
$var wire 1 :# a $end
$var wire 1 ;# b $end
$var wire 1 <# cIn $end
$var wire 1 =# fIn $end
$var wire 1 ># s $end
$var wire 1 ?# notFOut $end
$var wire 1 @# notFIn $end
$var wire 1 A# notCOut $end
$var wire 1 B# notCIn $end
$var wire 1 C# fOut $end
$var wire 1 D# cOut $end
$var wire 1 E# Y $end
$scope module OA1 $end
$var wire 1 :# a $end
$var wire 1 ;# b $end
$var wire 1 E# out $end
$var wire 1 F# node2 $end
$var wire 1 G# node1 $end
$var wire 1 B# c $end
$scope module nand1 $end
$var wire 1 E# out $end
$var wire 1 B# b $end
$var wire 1 F# a $end
$upscope $end
$scope module nor1 $end
$var wire 1 :# a $end
$var wire 1 ;# b $end
$var wire 1 G# out $end
$upscope $end
$scope module not1 $end
$var wire 1 G# a $end
$var wire 1 F# out $end
$upscope $end
$upscope $end
$scope module nand1 $end
$var wire 1 :# a $end
$var wire 1 ;# b $end
$var wire 1 ?# out $end
$upscope $end
$scope module nand2 $end
$var wire 1 E# b $end
$var wire 1 ># out $end
$var wire 1 @# a $end
$upscope $end
$scope module nand3 $end
$var wire 1 =# a $end
$var wire 1 E# b $end
$var wire 1 A# out $end
$upscope $end
$scope module not1 $end
$var wire 1 ?# a $end
$var wire 1 C# out $end
$upscope $end
$scope module not2 $end
$var wire 1 <# a $end
$var wire 1 B# out $end
$upscope $end
$scope module not3 $end
$var wire 1 =# a $end
$var wire 1 @# out $end
$upscope $end
$scope module not4 $end
$var wire 1 A# a $end
$var wire 1 D# out $end
$upscope $end
$upscope $end
$upscope $end
$scope begin rcpa2Loop[15] $end
$scope module rcpfa2_inst $end
$var wire 1 H# a $end
$var wire 1 I# b $end
$var wire 1 J# cIn $end
$var wire 1 K# fIn $end
$var wire 1 L# s $end
$var wire 1 M# notFOut $end
$var wire 1 N# notFIn $end
$var wire 1 O# notCOut $end
$var wire 1 P# notCIn $end
$var wire 1 Q# fOut $end
$var wire 1 R# cOut $end
$var wire 1 S# Y $end
$scope module OA1 $end
$var wire 1 H# a $end
$var wire 1 I# b $end
$var wire 1 S# out $end
$var wire 1 T# node2 $end
$var wire 1 U# node1 $end
$var wire 1 P# c $end
$scope module nand1 $end
$var wire 1 S# out $end
$var wire 1 P# b $end
$var wire 1 T# a $end
$upscope $end
$scope module nor1 $end
$var wire 1 H# a $end
$var wire 1 I# b $end
$var wire 1 U# out $end
$upscope $end
$scope module not1 $end
$var wire 1 U# a $end
$var wire 1 T# out $end
$upscope $end
$upscope $end
$scope module nand1 $end
$var wire 1 H# a $end
$var wire 1 I# b $end
$var wire 1 M# out $end
$upscope $end
$scope module nand2 $end
$var wire 1 S# b $end
$var wire 1 L# out $end
$var wire 1 N# a $end
$upscope $end
$scope module nand3 $end
$var wire 1 K# a $end
$var wire 1 S# b $end
$var wire 1 O# out $end
$upscope $end
$scope module not1 $end
$var wire 1 M# a $end
$var wire 1 Q# out $end
$upscope $end
$scope module not2 $end
$var wire 1 J# a $end
$var wire 1 P# out $end
$upscope $end
$scope module not3 $end
$var wire 1 K# a $end
$var wire 1 N# out $end
$upscope $end
$scope module not4 $end
$var wire 1 O# a $end
$var wire 1 R# out $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module nBitRippleCarryAdderInst $end
$var wire 16 V# A [15:0] $end
$var wire 16 W# B [15:0] $end
$var wire 1 , cin $end
$var wire 16 X# sum [15:0] $end
$var wire 16 Y# sum11 [15:0] $end
$var wire 1 # cout $end
$var wire 16 Z# carryMiddle [15:0] $end
$scope begin genAdder[0] $end
$scope begin genblk2 $end
$scope module f $end
$var wire 1 [# A $end
$var wire 1 \# B $end
$var wire 1 , Cin $end
$var wire 1 ]# Cout $end
$var wire 1 ^# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[1] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 _# A $end
$var wire 1 `# B $end
$var wire 1 a# Cin $end
$var wire 1 b# Cout $end
$var wire 1 c# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[2] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 d# A $end
$var wire 1 e# B $end
$var wire 1 f# Cin $end
$var wire 1 g# Cout $end
$var wire 1 h# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[3] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 i# A $end
$var wire 1 j# B $end
$var wire 1 k# Cin $end
$var wire 1 l# Cout $end
$var wire 1 m# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[4] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 n# A $end
$var wire 1 o# B $end
$var wire 1 p# Cin $end
$var wire 1 q# Cout $end
$var wire 1 r# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[5] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 s# A $end
$var wire 1 t# B $end
$var wire 1 u# Cin $end
$var wire 1 v# Cout $end
$var wire 1 w# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[6] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 x# A $end
$var wire 1 y# B $end
$var wire 1 z# Cin $end
$var wire 1 {# Cout $end
$var wire 1 |# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[7] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 }# A $end
$var wire 1 ~# B $end
$var wire 1 !$ Cin $end
$var wire 1 "$ Cout $end
$var wire 1 #$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[8] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 $$ A $end
$var wire 1 %$ B $end
$var wire 1 &$ Cin $end
$var wire 1 '$ Cout $end
$var wire 1 ($ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[9] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 )$ A $end
$var wire 1 *$ B $end
$var wire 1 +$ Cin $end
$var wire 1 ,$ Cout $end
$var wire 1 -$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[10] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 .$ A $end
$var wire 1 /$ B $end
$var wire 1 0$ Cin $end
$var wire 1 1$ Cout $end
$var wire 1 2$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[11] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 3$ A $end
$var wire 1 4$ B $end
$var wire 1 5$ Cin $end
$var wire 1 6$ Cout $end
$var wire 1 7$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[12] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 8$ A $end
$var wire 1 9$ B $end
$var wire 1 :$ Cin $end
$var wire 1 ;$ Cout $end
$var wire 1 <$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[13] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 =$ A $end
$var wire 1 >$ B $end
$var wire 1 ?$ Cin $end
$var wire 1 @$ Cout $end
$var wire 1 A$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[14] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 B$ A $end
$var wire 1 C$ B $end
$var wire 1 D$ Cin $end
$var wire 1 E$ Cout $end
$var wire 1 F$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[15] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 G$ A $end
$var wire 1 H$ B $end
$var wire 1 I$ Cin $end
$var wire 1 J$ Cout $end
$var wire 1 K$ sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1K$
0J$
1I$
0H$
0G$
1F$
1E$
1D$
1C$
1B$
0A$
1@$
1?$
1>$
0=$
0<$
1;$
0:$
19$
18$
17$
06$
15$
04$
03$
02$
11$
10$
0/$
1.$
0-$
1,$
1+$
0*$
1)$
0($
1'$
0&$
1%$
1$$
1#$
0"$
0!$
1~#
0}#
1|#
0{#
1z#
0y#
0x#
0w#
1v#
1u#
1t#
0s#
1r#
1q#
1p#
1o#
1n#
0m#
1l#
0k#
1j#
1i#
1h#
0g#
0f#
1e#
0d#
1c#
0b#
0a#
1`#
0_#
1^#
0]#
0\#
1[#
b111011100111000 Z#
b1100100011010111 Y#
b1100100011010111 X#
b111000110111110 W#
b101011100011001 V#
0U#
1T#
0S#
0R#
0Q#
1P#
1O#
1N#
1M#
1L#
0K#
0J#
1I#
0H#
0G#
1F#
0E#
0D#
0C#
1B#
1A#
1@#
1?#
1>#
0=#
0<#
1;#
0:#
19#
08#
17#
06#
05#
14#
13#
12#
11#
00#
0/#
0.#
0-#
0,#
0+#
1*#
0)#
0(#
0'#
1&#
1%#
1$#
1##
1"#
0!#
0~"
0}"
1|"
1{"
0z"
1y"
0x"
0w"
1v"
1u"
1t"
1s"
0r"
0q"
0p"
0o"
0n"
1m"
0l"
1k"
0j"
0i"
1h"
1g"
1f"
1e"
0d"
0c"
0b"
0a"
0`"
1_"
0^"
1]"
0\"
0["
1Z"
1Y"
1X"
1W"
0V"
0U"
0T"
0S"
0R"
1Q"
0P"
1O"
0N"
0M"
1L"
1K"
1J"
1I"
0H"
0G"
0F"
0E"
0D"
0C"
1B"
0A"
0@"
0?"
1>"
1="
0<"
1;"
1:"
19"
08"
07"
16"
05"
14"
03"
02"
11"
10"
1/"
1."
0-"
1,"
0+"
0*"
1)"
1("
1'"
0&"
1%"
0$"
0#"
1""
1!"
1~
1}
0|
0{
0z
0y
0x
0w
1v
0u
0t
0s
1r
1q
1p
1o
1n
0m
0l
1k
0j
0i
1h
0g
0f
0e
1d
1c
1b
1a
1`
0_
0^
1]
0\
0[
1Z
0Y
0X
0W
1V
1U
1T
1S
1R
0Q
0P
1O
0N
1M
0L
1K
1J
0I
1H
0G
0F
1E
1D
1C
0B
0A
0@
0?
1>
1=
0<
1;
0:
19
18
07
06
05
14
13
12
b10000010 1
b10 0
b1101000011011110 /
b1100000001011101 .
b1000011000001 -
0,
b1110001101111101100000001011101 +
b11001000110101111101000011011110 *
b1110001101111101100000001011101 )
b1010111000110010001000011000001 (
b1110001101111101100000001011101 '
b1110001101111101100000001011101 &
b1010111000110010001000011000001 %
b1010111000110010001000011000001 $
0#
b11001000110101111101000011011110 "
b11001000110101111101000100011110 !
$end
#10000
16
0=
1:
04
0n
b0 0
0J
10#
0,"
0:"
b1111000000101111 /
1|
1G
02#
1u
0K
1F
0N#
07#
1A"
13"
1<"
0%"
1($
1/#
0C
1K#
09"
1&$
05$
0<$
1'#
0v
1L
0;
1C#
18#
0B"
04"
b1010000000000000 1
01"
1&"
1m#
0r#
0#$
1"$
12$
01$
0:$
0##
1w
0M
17
0?#
09#
1C"
15"
1-"
0'"
1k#
0p#
1!$
0+$
00$
17$
06$
0h#
1g#
0l#
0|#
1{#
0'$
b11001101000010111111000000101111 "
b11001101000010111111000000101111 *
b1100110100001011 X#
b1100110100001011 Y#
0-$
b111000011110100 Z#
0,$
0`#
0j#
0t#
0~#
0%$
14$
0>$
0I#
1}"
0)"
0k
0]
0O
1A
03
1H#
1:#
1,#
06"
0("
1x
1\
1N
1_#
1d#
0i#
1s#
1x#
1}#
0$$
0)$
1=$
b101100000010100 W#
b101000000000010 .
b1111000000101101 -
b111010011110111 V#
b1011000000101000101000000000010 '
b11001101000011000100000000101111 !
b1110100111101111111000000101101 %
b1011000000101000101000000000010 +
b1011000000101000101000000000010 &
b1011000000101000101000000000010 )
b1110100111101111111000000101101 $
b1110100111101111111000000101101 (
#20000
1h"
10"
0b"
0*"
1V"
1H"
0L#
1d"
0x"
1r"
1,"
b0 0
0@"
1:"
1n
b111111111111110 /
06
1u"
1="
1!$
0y"
0]"
0O"
1S#
1N#
0k"
0t"
0A"
03"
0<"
0u
0~
1=
0|#
1{#
0K#
1q"
19"
1{
1z#
1-$
0K$
1z"
1^"
1P"
0T#
0C#
1l"
1i"
1B"
14"
11"
1v
b10100010100000 1
1s
0>
0m#
0w#
1v#
1+$
0I$
0{"
0_"
0Q"
1U#
1?#
0m"
0e"
0C"
05"
0-"
0w
0o
1?
0k#
1p#
1u#
1:$
1?$
1#$
0($
1'$
1A$
0E$
0^#
1h#
0g#
1l#
0r#
1q#
02$
07$
16$
b1100010100001100111111111111110 "
b1100010100001100111111111111110 *
b110001010000110 X#
b110001010000110 Y#
0<$
b11100111111000 Z#
1;$
1`#
1j#
1~#
1%$
1>$
0C$
1-#
1o"
1a"
1S"
1E"
1)"
1y
1k
1]
0A
0H#
0:#
0,#
1`"
16"
1("
0x
1j
0\
1@
02
0[#
0_#
0d#
1i#
0n#
0.$
13$
08$
0B$
b11100110011110 W#
b111111101111000 .
b1010011010110 -
b10100011101000 V#
b111001100111100111111101111000 '
b1100010100001101001010001001110 !
b101000111010000001010011010110 %
b111001100111100111111101111000 +
b111001100111100111111101111000 &
b111001100111100111111101111000 )
b101000111010000001010011010110 $
b101000111010000001010011010110 (
#30000

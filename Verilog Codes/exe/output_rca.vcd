$date
	Thu Apr 18 16:30:43 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbenchrca $end
$var wire 8 ! result [7:0] $end
$var wire 1 " cout $end
$var reg 8 # A1 [7:0] $end
$var reg 8 $ B1 [7:0] $end
$var reg 1 % carryin $end
$scope module nBitRippleCarryAdderInst $end
$var wire 8 & A [7:0] $end
$var wire 8 ' B [7:0] $end
$var wire 1 % cin $end
$var wire 8 ( sum [7:0] $end
$var wire 8 ) sum11 [7:0] $end
$var wire 1 " cout $end
$var wire 8 * carryMiddle [7:0] $end
$scope begin genAdder[0] $end
$scope begin genblk2 $end
$scope module f $end
$var wire 1 + A $end
$var wire 1 , B $end
$var wire 1 % Cin $end
$var wire 1 - Cout $end
$var wire 1 . sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[1] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 / A $end
$var wire 1 0 B $end
$var wire 1 1 Cin $end
$var wire 1 2 Cout $end
$var wire 1 3 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[2] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 4 A $end
$var wire 1 5 B $end
$var wire 1 6 Cin $end
$var wire 1 7 Cout $end
$var wire 1 8 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[3] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 9 A $end
$var wire 1 : B $end
$var wire 1 ; Cin $end
$var wire 1 < Cout $end
$var wire 1 = sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[4] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 > A $end
$var wire 1 ? B $end
$var wire 1 @ Cin $end
$var wire 1 A Cout $end
$var wire 1 B sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[5] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 C A $end
$var wire 1 D B $end
$var wire 1 E Cin $end
$var wire 1 F Cout $end
$var wire 1 G sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[6] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 H A $end
$var wire 1 I B $end
$var wire 1 J Cin $end
$var wire 1 K Cout $end
$var wire 1 L sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genAdder[7] $end
$scope begin genblk3 $end
$scope module f $end
$var wire 1 M A $end
$var wire 1 N B $end
$var wire 1 O Cin $end
$var wire 1 P Cout $end
$var wire 1 Q sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0Q
0P
0O
0N
0M
1L
0K
0J
1I
0H
0G
0F
0E
0D
0C
1B
0A
0@
1?
0>
1=
0<
1;
0:
09
08
17
16
15
04
13
12
11
10
1/
1.
1-
1,
1+
b111 *
b1011011 )
b1011011 (
b1010111 '
b11 &
1%
b1010111 $
b11 #
0"
b1011011 !
$end
#10000
0G
0E
1B
0A
0;
1J
0@
03
18
07
1F
1L
b1011101 !
b1011101 (
b1011101 )
1=
b100011 *
0<
00
05
1D
0I
19
1C
b110001 $
b110001 '
b101011 #
b101011 &
#20000
0Q
0J
0O
0.
0=
0F
b1010100 !
b1010100 (
b1010100 )
1L
b11 *
0K
0,
10
0?
0D
0/
09
1>
0C
1H
b10 $
b10 '
b1010001 #
b1010001 &
#30000
1Q
1O
1@
0L
1K
1<
1J
1;
1.
1F
08
b1101111 *
17
0=
b10010001 !
b10010001 (
b10010001 )
1B
1,
00
1D
1/
14
19
0>
1C
b100001 $
b100001 '
b1101111 #
b1101111 &
#40000
0B
0@
1=
0<
1Q
0;
1O
18
07
0L
1K
06
1E
1J
13
02
1A
b10001111 !
b10001111 (
b10001111 )
0G
b1110001 *
1F
1:
1?
1I
0/
09
1>
0C
0H
b1111001 $
b1111001 '
b10101 #
b10101 &
#50000
16
0E
0.
03
12
1B
b1100011 *
0A
18
0G
b11011100 !
b11011100 (
b11011100 )
1L
0,
10
0:
0?
04
19
1C
1H
b1100010 $
b1100010 '
b1111001 #
b1111001 &
#60000
1G
1E
0B
1A
0Q
1@
0O
1;
1=
1<
0K
b1101000 !
b1101000 (
b1101000 )
08
b111111 *
17
1,
1:
1?
0I
0+
14
0>
0H
b111011 $
b111011 '
b101100 #
b101100 &
#70000
0"
0G
0P
0=
06
0@
0E
0J
0O
0;
13
02
0<
0B
0A
0F
1L
0K
08
b1 *
07
b11000010 !
b11000010 (
b11000010 )
1Q
00
0:
0?
0D
1I
04
09
0C
1M
b1000001 $
b1000001 '
b10000000 #
b10000000 &
#80000
1B
1@
1O
03
1<
1G
0L
1K
18
01
1;
1E
1J
16
1.
0-
17
1A
1F
b1111110 *
12
0=
b10110101 !
b10110101 (
b10110101 )
1Q
0,
10
15
1?
1D
1/
14
19
1>
1C
0M
b1110110 $
b1110110 '
b111110 #
b111110 &
#90000
0G
13
0B
0E
0J
11
0@
08
0A
0F
0.
1-
1=
b1000111 *
0<
b10001010 !
b10001010 (
b10001010 )
0L
05
0?
0D
1+
09
0>
0C
1H
b1000010 $
b1000010 '
b1000111 #
b1000111 &
#100000
1B
1@
18
1G
03
b10110100 !
b10110100 (
b10110100 )
0=
b1001111 *
1<
1,
15
1D
0+
0/
19
b1100111 $
b1100111 '
b1001100 #
b1001100 &
#110000
08
0Q
06
0;
1E
0O
13
02
07
0=
1G
1.
b100011 !
b100011 (
b100011 )
0B
1A
b11001 *
0K
00
05
1:
0D
0I
1+
04
1>
0H
b1001 $
b1001 '
b11001 #
b11001 &
#120000
